"""
Algoritmo Gen√©tico para resolver o Desafio de Einstein
Disciplina: Intelig√™ncia Artificial
Prof. Tiago Bonini Borchartt

Este programa implementa um algoritmo gen√©tico para resolver o famoso
Desafio de Einstein, um quebra-cabe√ßa l√≥gico que envolve 5 casas,
5 nacionalidades, 5 bebidas, 5 cigarros e 5 animais.
"""

import time
import random
from typing import List, Tuple

# Importar m√≥dulos do projeto
from genetic_algorithm import (
    ATTRS,
    random_chrom,
    mutate,
    crossover,
    roulette_selection,
    show_solution,
)
from einstein_rules import RULES, fitness

# Par√¢metros do Algoritmo Gen√©tico
POPULATION_SIZE = 800  # Tamanho da popula√ß√£o
CROSSOVER_RATE = 0.80  # Taxa de crossover (80%)
MUTATION_RATE = 0.05  # Taxa de muta√ß√£o (5%)
SURVIVAL_RATE = 0.10  # Taxa de sobreviv√™ncia (10% - elitismo)
IMMIGRATION_RATE = 0.05  # Taxa de imigra√ß√£o (5%)


def main():
    """Fun√ß√£o principal que executa o algoritmo gen√©tico"""
    print("üß¨ ALGORITMO GEN√âTICO - DESAFIO DE EINSTEIN")
    print("=" * 60)
    print("üìã REQUISITOS IMPLEMENTADOS:")
    print("   ‚úÖ Cromossomos representam solu√ß√µes codificadas")
    print("   ‚úÖ Fun√ß√£o fitness baseada nas 15 regras")
    print("   ‚úÖ Opera√ß√µes: sobreviv√™ncia, crossover, muta√ß√£o, imigra√ß√£o")
    print("   ‚úÖ M√©todo da roleta para sele√ß√£o")
    print("   ‚úÖ Visualiza√ß√£o gen√≥tipo/fen√≥tipo")
    print("=" * 60)
    print("üìä PAR√ÇMETROS CONFIGURADOS:")
    print(f"   ‚Ä¢ Popula√ß√£o: {POPULATION_SIZE} indiv√≠duos")
    print(f"   ‚Ä¢ Taxa Crossover: {CROSSOVER_RATE*100:.0f}%")
    print(f"   ‚Ä¢ Taxa Muta√ß√£o: {MUTATION_RATE*100:.0f}%")
    print(f"   ‚Ä¢ Taxa Sobreviv√™ncia: {SURVIVAL_RATE*100:.0f}%")
    print(f"   ‚Ä¢ Taxa Imigra√ß√£o: {IMMIGRATION_RATE*100:.0f}%")
    print("=" * 60)

    # ---- ALGORITMO GEN√âTICO PRINCIPAL ----------------------------------------
    print("üé≤ Gerando popula√ß√£o inicial...")
    start_time = time.time()
    POP = [random_chrom() for _ in range(POPULATION_SIZE)]

    generation = 0
    print(f"‚úÖ Popula√ß√£o inicial: {len(POP)} cromossomos gerados")
    print("\nüîç Iniciando evolu√ß√£o...")

    while True:
        # 1. AVALIA√á√ÉO
        fitness_values = [fitness(chrom) for chrom in POP]

        # Ordenar por fitness (melhores primeiro)
        sorted_indices = sorted(
            range(len(POP)), key=lambda i: fitness_values[i], reverse=True
        )
        POP = [POP[i] for i in sorted_indices]
        fitness_values = [fitness_values[i] for i in sorted_indices]

        best = POP[0]
        best_fitness = fitness_values[0]
        avg_fitness = sum(fitness_values) / len(fitness_values)

        # Log de progresso
        if generation % 100 == 0 or best_fitness >= 14:
            elapsed = time.time() - start_time
            print(
                f"Gera√ß√£o {generation:4d} | Melhor: {best_fitness:2d}/15 | M√©dia: {avg_fitness:4.1f} | Tempo: {elapsed:5.1f}s"
            )

        # 2. CRIT√âRIO DE PARADA
        if best_fitness == 15:
            elapsed_time = time.time() - start_time
            print(f"\nüéâ SOLU√á√ÉO ENCONTRADA NA GERA√á√ÉO {generation}!")
            print(f"‚è±Ô∏è  Tempo total: {elapsed_time:.2f} segundos")
            break

        # 3. OPERA√á√ïES GEN√âTICAS

        # SOBREVIV√äNCIA (Elitismo)
        num_survivors = int(POPULATION_SIZE * SURVIVAL_RATE)
        survivors = POP[:num_survivors]

        # REPRODU√á√ÉO (Crossover + Muta√ß√£o)
        offspring = []
        while len(offspring) < POPULATION_SIZE - num_survivors - int(
            POPULATION_SIZE * IMMIGRATION_RATE
        ):
            # Sele√ß√£o por roleta
            p1 = roulette_selection(POP[:100], fitness_values[:100])  # Top 100
            p2 = roulette_selection(POP[:100], fitness_values[:100])

            # Crossover
            c1, c2 = crossover(p1, p2, CROSSOVER_RATE)

            # Muta√ß√£o
            c1 = mutate(c1, MUTATION_RATE)
            c2 = mutate(c2, MUTATION_RATE)

            offspring.extend([c1, c2])

        # IMIGRA√á√ÉO
        num_immigrants = int(POPULATION_SIZE * IMMIGRATION_RATE)
        immigrants = [random_chrom() for _ in range(num_immigrants)]

        # Nova popula√ß√£o
        POP = (
            survivors
            + offspring[: POPULATION_SIZE - num_survivors - num_immigrants]
            + immigrants
        )
        generation += 1

    # ---- APRESENTA√á√ÉO DA SOLU√á√ÉO FINAL ---------------------------------------
    show_solution(best)

    # Encontrar quem tem os peixes (resposta do desafio)
    for idx, casa in enumerate(best, 1):
        if casa[4] == "Peixes":
            print(f"\nüêü RESPOSTA: O {casa[1]} (Casa {idx}) tem os Peixes!")
            break

    # Verifica√ß√£o das regras
    print(f"\nüìã VERIFICA√á√ÉO DAS 15 REGRAS:")
    regras_corretas = 0
    for i, rule in enumerate(RULES, 1):
        status = "‚úÖ" if rule(best) else "‚ùå"
        if rule(best):
            regras_corretas += 1
        print(f"   Regra {i:2d}: {status}")

    print(f"\nüèÜ RESULTADO FINAL:")
    print(f"   ‚Ä¢ Solu√ß√£o encontrada na gera√ß√£o: {generation}")
    print(f"   ‚Ä¢ Tempo de execu√ß√£o: {elapsed_time:.2f} segundos")
    print(f"   ‚Ä¢ Regras satisfeitas: {regras_corretas}/15")
    print(f"   ‚Ä¢ Algoritmo gen√©tico: SUCESSO! ‚úÖ")

    print(f"\nüìö DEMONSTRA√á√ÉO DOS REQUISITOS ATENDIDOS:")
    print(f"   ‚úÖ Cromossomos codificados (5 casas √ó 5 atributos)")
    print(f"   ‚úÖ Fun√ß√£o fitness baseada nas 15 regras")
    print(f"   ‚úÖ Sobreviv√™ncia: {SURVIVAL_RATE*100:.0f}% dos melhores")
    print(f"   ‚úÖ Crossover: {CROSSOVER_RATE*100:.0f}% de taxa")
    print(f"   ‚úÖ Muta√ß√£o: {MUTATION_RATE*100:.0f}% de taxa")
    print(f"   ‚úÖ Imigra√ß√£o: {IMMIGRATION_RATE*100:.0f}% novos indiv√≠duos")
    print(f"   ‚úÖ M√©todo da roleta implementado")
    print(f"   ‚úÖ Popula√ß√£o de {POPULATION_SIZE} indiv√≠duos")
    print(f"   ‚úÖ Visualiza√ß√£o da solu√ß√£o")
    print(f"   ‚úÖ Execu√ß√£o at√© encontrar solu√ß√£o")


if __name__ == "__main__":
    main()
