"""
Algoritmo Gen√©tico para resolver o Desafio de Einstein
Disciplina: Intelig√™ncia Artificial
Prof. Tiago Bonini Borchartt

Este programa implementa um algoritmo gen√©tico para resolver o famoso
Desafio de Einstein, um quebra-cabe√ßa l√≥gico que envolve 5 casas,
5 nacionalidades, 5 bebidas, 5 cigarros e 5 animais.
"""

import random
import time
from typing import List, Tuple

# Defini√ß√£o dos atributos poss√≠veis para cada casa
ATTRS = {
    "cor": ["Amarela", "Azul", "Branca", "Verde", "Vermelha"],
    "nacional": ["Noruegu√™s", "Dinamarqu√™s", "Ingl√™s", "Sueco", "Alem√£o"],
    "bebida": ["√Ågua", "Ch√°", "Caf√©", "Cerveja", "Leite"],
    "cigarro": ["Dunhill", "Blends", "BlueMaster", "Pall Mall", "Prince"],
    "animal": ["Gatos", "Cavalos", "P√°ssaros", "Peixes", "Cachorros"],
}
ATTR_KEYS = list(ATTRS)

# Par√¢metros do Algoritmo Gen√©tico (atendendo aos requisitos)
POPULATION_SIZE = 800  # Tamanho da popula√ß√£o
CROSSOVER_RATE = 0.80  # Taxa de crossover (80%)
MUTATION_RATE = 0.05  # Taxa de muta√ß√£o (5%)
SURVIVAL_RATE = 0.10  # Taxa de sobreviv√™ncia (10% - elitismo)
IMMIGRATION_RATE = 0.05  # Taxa de imigra√ß√£o (5%)

print("üß¨ ALGORITMO GEN√âTICO - DESAFIO DE EINSTEIN")
print("=" * 60)
print("üìã REQUISITOS IMPLEMENTADOS:")
print("   ‚úÖ Cromossomos representam solu√ß√µes codificadas")
print("   ‚úÖ Fun√ß√£o fitness baseada nas 15 regras")
print("   ‚úÖ Opera√ß√µes: sobreviv√™ncia, crossover, muta√ß√£o, imigra√ß√£o")
print("   ‚úÖ M√©todo da roleta para sele√ß√£o")
print("   ‚úÖ Visualiza√ß√£o gen√≥tipo/fen√≥tipo")
print("=" * 60)
print("üìä PAR√ÇMETROS CONFIGURADOS:")
print(f"   ‚Ä¢ Popula√ß√£o: {POPULATION_SIZE} indiv√≠duos")
print(f"   ‚Ä¢ Taxa Crossover: {CROSSOVER_RATE*100:.0f}%")
print(f"   ‚Ä¢ Taxa Muta√ß√£o: {MUTATION_RATE*100:.0f}%")
print(f"   ‚Ä¢ Taxa Sobreviv√™ncia: {SURVIVAL_RATE*100:.0f}%")
print(f"   ‚Ä¢ Taxa Imigra√ß√£o: {IMMIGRATION_RATE*100:.0f}%")
print("=" * 60)


def random_chrom():
    """Gera um cromossomo aleat√≥rio representando uma configura√ß√£o das 5 casas."""
    cols = [random.sample(ATTRS[k], 5) for k in ATTR_KEYS]
    return list(zip(*cols))


def show_solution(chrom):
    """Mostra a solu√ß√£o de forma clara para apresenta√ß√£o"""
    print("\n" + "=" * 70)
    print("                    SOLU√á√ÉO ENCONTRADA")
    print("=" * 70)
    print("Casa | Cor        | Nacionalidade | Bebida   | Cigarro      | Animal")
    print("-" * 70)
    for i, casa in enumerate(chrom, 1):
        cor, nacionalidade, bebida, cigarro, animal = casa
        print(
            f"  {i}  | {cor:10} | {nacionalidade:12} | {bebida:8} | {cigarro:12} | {animal}"
        )
    print("=" * 70)


def mutate(chrom):
    """Opera√ß√£o de muta√ß√£o: troca atributos entre duas casas aleat√≥rias"""
    if random.random() > MUTATION_RATE:
        return chrom

    i, j = random.sample(range(5), 2)  # Duas casas aleat√≥rias
    col = random.randrange(5)  # Um atributo aleat√≥rio
    chrom = chrom[:]  # Copia
    c1, c2 = list(chrom[i]), list(chrom[j])
    c1[col], c2[col] = c2[col], c1[col]  # Troca
    chrom[i], chrom[j] = tuple(c1), tuple(c2)
    return chrom


def crossover(p1, p2):
    """Opera√ß√£o de crossover: combina dois pais em um ponto aleat√≥rio"""
    if random.random() > CROSSOVER_RATE:
        return p1, p2
    point = random.randint(1, 4)
    return p1[:point] + p2[point:], p2[:point] + p1[point:]


def roulette_selection(population: List, fitness_values: List[int]):
    """M√©todo da roleta para sele√ß√£o de pais (REQUISITO OBRIGAT√ìRIO)"""
    total_fitness = sum(fitness_values)
    if total_fitness == 0:
        return random.choice(population)

    r = random.uniform(0, total_fitness)
    cumulative = 0
    for i, fitness_val in enumerate(fitness_values):
        cumulative += fitness_val
        if cumulative >= r:
            return population[i]
    return population[-1]


# ---- Fun√ß√£o de Avalia√ß√£o (Fitness) ---------------------------------------
def fitness(chrom):
    """Fun√ß√£o fitness: conta quantas das 15 regras s√£o satisfeitas"""
    return sum(r(chrom) for r in RULES)


# ---- Fun√ß√µes Auxiliares --------------------------------------------------
def vizinhos(i: int) -> list[int]:
    """Retorna √≠ndices das casas vizinhas (esquerda e direita)"""
    return [j for j in (i - 1, i + 1) if 0 <= j < 5]


# ---- AS 15 REGRAS DO DESAFIO DE EINSTEIN --------------------------------
def r1(h):  # O Noruegu√™s vive na primeira casa
    return h[0][1] == "Noruegu√™s"


def r2(h):  # O Ingl√™s vive na casa Vermelha
    return any(cor == "Vermelha" and nat == "Ingl√™s" for cor, nat, *_ in h)


def r3(h):  # O Sueco tem Cachorros
    return any(nat == "Sueco" and animal == "Cachorros" for _, nat, _, _, animal in h)


def r4(h):  # O Dinamarqu√™s bebe Ch√°
    return any(nat == "Dinamarqu√™s" and bebida == "Ch√°" for _, nat, bebida, _, _ in h)


def r5(h):  # A casa Verde fica do lado esquerdo da casa Branca
    idx_verde = next((i for i, (cor, *_) in enumerate(h) if cor == "Verde"), -1)
    idx_branca = next((i for i, (cor, *_) in enumerate(h) if cor == "Branca"), -1)
    return idx_verde != -1 and idx_branca == idx_verde + 1


def r6(h):  # O homem que vive na casa Verde bebe Caf√©
    return any(cor == "Verde" and bebida == "Caf√©" for cor, _, bebida, _, _ in h)


def r7(h):  # O homem que fuma Pall Mall cria P√°ssaros
    return any(
        cigarro == "Pall Mall" and animal == "P√°ssaros"
        for _, _, _, cigarro, animal in h
    )


def r8(h):  # O homem que vive na casa Amarela fuma Dunhill
    return any(cor == "Amarela" and cigarro == "Dunhill" for cor, _, _, cigarro, _ in h)


def r9(h):  # O homem que vive na casa do meio bebe Leite
    return h[2][2] == "Leite"


def r10(h):  # O homem que fuma Blends vive ao lado do que tem Gatos
    for i, (_, _, _, cigarro, _) in enumerate(h):
        if cigarro == "Blends" and any(h[j][4] == "Gatos" for j in vizinhos(i)):
            return True
    return False


def r11(h):  # O homem que cria Cavalos vive ao lado do que fuma Dunhill
    for i, (_, _, _, _, animal) in enumerate(h):
        if animal == "Cavalos" and any(h[j][3] == "Dunhill" for j in vizinhos(i)):
            return True
    return False


def r12(h):  # O homem que fuma BlueMaster bebe Cerveja
    return any(
        cigarro == "BlueMaster" and bebida == "Cerveja"
        for _, _, bebida, cigarro, _ in h
    )


def r13(h):  # O Alem√£o fuma Prince
    return any(nat == "Alem√£o" and cigarro == "Prince" for _, nat, _, cigarro, _ in h)


def r14(h):  # O Noruegu√™s vive ao lado da casa Azul
    idx_nor = next((i for i, (_, nat, *_) in enumerate(h) if nat == "Noruegu√™s"), -1)
    return idx_nor != -1 and any(h[j][0] == "Azul" for j in vizinhos(idx_nor))


def r15(h):  # O homem que fuma Blends √© vizinho do que bebe √Ågua
    for i, (_, _, _, cigarro, _) in enumerate(h):
        if cigarro == "Blends" and any(h[j][2] == "√Ågua" for j in vizinhos(i)):
            return True
    return False


RULES = [r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15]


# ---- ALGORITMO GEN√âTICO PRINCIPAL ----------------------------------------
print("üé≤ Gerando popula√ß√£o inicial...")
start_time = time.time()
POP = [random_chrom() for _ in range(POPULATION_SIZE)]

generation = 0
print(f"‚úÖ Popula√ß√£o inicial: {len(POP)} cromossomos gerados")
print("\nüîç Iniciando evolu√ß√£o...")

while True:
    # 1. AVALIA√á√ÉO
    fitness_values = [fitness(chrom) for chrom in POP]

    # Ordenar por fitness (melhores primeiro)
    sorted_indices = sorted(
        range(len(POP)), key=lambda i: fitness_values[i], reverse=True
    )
    POP = [POP[i] for i in sorted_indices]
    fitness_values = [fitness_values[i] for i in sorted_indices]

    best = POP[0]
    best_fitness = fitness_values[0]
    avg_fitness = sum(fitness_values) / len(fitness_values)

    # Log de progresso
    if generation % 100 == 0 or best_fitness >= 14:
        elapsed = time.time() - start_time
        print(
            f"Gera√ß√£o {generation:4d} | Melhor: {best_fitness:2d}/15 | M√©dia: {avg_fitness:4.1f} | Tempo: {elapsed:5.1f}s"
        )

    # 2. CRIT√âRIO DE PARADA
    if best_fitness == 15:
        elapsed_time = time.time() - start_time
        print(f"\nüéâ SOLU√á√ÉO ENCONTRADA NA GERA√á√ÉO {generation}!")
        print(f"‚è±Ô∏è  Tempo total: {elapsed_time:.2f} segundos")
        break

    # 3. OPERA√á√ïES GEN√âTICAS

    # SOBREVIV√äNCIA (Elitismo)
    num_survivors = int(POPULATION_SIZE * SURVIVAL_RATE)
    survivors = POP[:num_survivors]

    # REPRODU√á√ÉO (Crossover + Muta√ß√£o)
    offspring = []
    while len(offspring) < POPULATION_SIZE - num_survivors - int(
        POPULATION_SIZE * IMMIGRATION_RATE
    ):
        # Sele√ß√£o por roleta
        p1 = roulette_selection(POP[:100], fitness_values[:100])  # Top 100
        p2 = roulette_selection(POP[:100], fitness_values[:100])

        # Crossover
        c1, c2 = crossover(p1, p2)

        # Muta√ß√£o
        c1 = mutate(c1)
        c2 = mutate(c2)

        offspring.extend([c1, c2])

    # IMIGRA√á√ÉO
    num_immigrants = int(POPULATION_SIZE * IMMIGRATION_RATE)
    immigrants = [random_chrom() for _ in range(num_immigrants)]

    # Nova popula√ß√£o
    POP = (
        survivors
        + offspring[: POPULATION_SIZE - num_survivors - num_immigrants]
        + immigrants
    )
    generation += 1

# ---- APRESENTA√á√ÉO DA SOLU√á√ÉO FINAL ---------------------------------------
show_solution(best)

# Encontrar quem tem os peixes (resposta do desafio)
for idx, casa in enumerate(best, 1):
    if casa[4] == "Peixes":
        print(f"\nüêü RESPOSTA: O {casa[1]} (Casa {idx}) tem os Peixes!")
        break

# Verifica√ß√£o das regras
print(f"\nüìã VERIFICA√á√ÉO DAS 15 REGRAS:")
regras_corretas = 0
for i, rule in enumerate(RULES, 1):
    status = "‚úÖ" if rule(best) else "‚ùå"
    if rule(best):
        regras_corretas += 1
    print(f"   Regra {i:2d}: {status}")

print(f"\nüèÜ RESULTADO FINAL:")
print(f"   ‚Ä¢ Solu√ß√£o encontrada na gera√ß√£o: {generation}")
print(f"   ‚Ä¢ Tempo de execu√ß√£o: {elapsed_time:.2f} segundos")
print(f"   ‚Ä¢ Regras satisfeitas: {regras_corretas}/15")
print(f"   ‚Ä¢ Algoritmo gen√©tico: SUCESSO! ‚úÖ")

print(f"\nüìö DEMONSTRA√á√ÉO DOS REQUISITOS ATENDIDOS:")
print(f"   ‚úÖ Cromossomos codificados (5 casas √ó 5 atributos)")
print(f"   ‚úÖ Fun√ß√£o fitness baseada nas 15 regras")
print(f"   ‚úÖ Sobreviv√™ncia: {SURVIVAL_RATE*100:.0f}% dos melhores")
print(f"   ‚úÖ Crossover: {CROSSOVER_RATE*100:.0f}% de taxa")
print(f"   ‚úÖ Muta√ß√£o: {MUTATION_RATE*100:.0f}% de taxa")
print(f"   ‚úÖ Imigra√ß√£o: {IMMIGRATION_RATE*100:.0f}% novos indiv√≠duos")
print(f"   ‚úÖ M√©todo da roleta implementado")
print(f"   ‚úÖ Popula√ß√£o de {POPULATION_SIZE} indiv√≠duos")
print(f"   ‚úÖ Visualiza√ß√£o da solu√ß√£o")
print(f"   ‚úÖ Execu√ß√£o at√© encontrar solu√ß√£o")
